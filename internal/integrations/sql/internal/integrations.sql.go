// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: integrations.sql

package internal

import (
	"context"
)

const createIntegration = `-- name: CreateIntegration :one
INSERT INTO integrations (
    name,
    description,
    vendor,
    source_url,
    homepage,
    license,
    instructions
  )
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, description, vendor, source_url, homepage, license, instructions
`

type CreateIntegrationParams struct {
	Name         string `json:"name"`
	Description  string `json:"description"`
	Vendor       string `json:"vendor"`
	SourceUrl    string `json:"source_url"`
	Homepage     string `json:"homepage"`
	License      string `json:"license"`
	Instructions []byte `json:"instructions"`
}

func (q *Queries) CreateIntegration(ctx context.Context, arg CreateIntegrationParams) (Integration, error) {
	row := q.db.QueryRowContext(ctx, createIntegration,
		arg.Name,
		arg.Description,
		arg.Vendor,
		arg.SourceUrl,
		arg.Homepage,
		arg.License,
		arg.Instructions,
	)
	var i Integration
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Vendor,
		&i.SourceUrl,
		&i.Homepage,
		&i.License,
		&i.Instructions,
	)
	return i, err
}

const listIntegrations = `-- name: ListIntegrations :many
SELECT id,
  name,
  description,
  vendor,
  source_url,
  homepage,
  license,
  instructions
FROM integrations
`

func (q *Queries) ListIntegrations(ctx context.Context) ([]Integration, error) {
	rows, err := q.db.QueryContext(ctx, listIntegrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Integration
	for rows.Next() {
		var i Integration
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Vendor,
			&i.SourceUrl,
			&i.Homepage,
			&i.License,
			&i.Instructions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
